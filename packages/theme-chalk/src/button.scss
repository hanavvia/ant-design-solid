@use './common/var' as *;
@use './mixins/function' as *;
@use './mixins/config' as *;
@use './mixins/var' as *;
@use 'mixins/mixins' as *;

@include b(button) {
  @include set-component-css-var('button', $button);
  outline: none;
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: #{getCssVar('button', 'font-weight')};
  white-space: nowrap;
  text-align: center;
  background-image: none;
  background-color: transparent;
  border: 1px solid transparent;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
  user-select: none;
  touch-action: manipulation;
  color: #{getCssVar('button', 'color')};
  font-size: #{getCssVar('button', 'font-size')}; //TODO
  padding: 4px 15px; //TODO
  border-radius: getCssVar('button', 'border-radius');  //TODO
  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.02);  //TODO
  border-color: getCssVar('button', 'border-color');  //TODO

  &:hover {
    border-color: #{getCssVar('button', 'primary-bg-color')};
    color: #{getCssVar('button', 'primary-bg-color')};
  }

  /* === type === */
  @include m(type-primary) {
    color: #{getCssVar('button', 'color-primary')};
    background-color: #{getCssVar('button', 'primary-bg-color')};
    box-shadow: 0 2px 0 rgba(5, 145, 255, 0.1);

    &:hover {
      color: #{getCssVar('button', 'color-primary')};
      background-color: #{getCssVar('button', 'primary-bg-color-hover')};
    }
  }

  @include m(type-dashed) {
    border-style: dashed;
  }

  @include m(type-text) {
    border: none;

    &:hover {
      background-color: #{getCssVar('button', 'text-bg-color-hover')};
    }
  }

  @include m(type-link) {
    border: none;
    color: #{getCssVar('button', 'link-color')};

    &:hover {
      color: #{getCssVar('button', 'link-color-hover')};
    }
  }

  /* === icon === */
  @include when(not-icon-only) {
    @include e(icon) {
      margin-inline-end: 8px;
    }
  }
  @include e(icon) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
  }

  /* === shape === */
  @include m(shape-circle) {
    padding-inline-start: 0;
    padding-inline-end: 0;
    border-radius: 50%;
  }

  /* ===== size ===== */
  @include m(shape-circle) {
    &.#{$namespace}#{$common-separator}button#{$modifier-separator}size-small {
      min-width: #{getCssVar('button', 'height-small')};
    }
    &.#{$namespace}#{$common-separator}button#{$modifier-separator}size-middle {
      min-width: #{getCssVar('button', 'height-middle')};
    }
    &.#{$namespace}#{$common-separator}button#{$modifier-separator}size-large {
      min-width: #{getCssVar('button', 'height-large')};
    }
  }
  @include m(size-small) {
    font-size: #{getCssVar('button', 'font-size-small')};
    height: #{getCssVar('button', 'height-small')};
    @include when(icon-only) {
      width: #{getCssVar('button', 'height-small')};
    }
    @include e(icon) {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 14px;
    }
  }
  @include m(size-middle) {
    height: #{getCssVar('button', 'height-middle')};
    @include when(icon-only) {
      width: #{getCssVar('button', 'height-middle')};
    }
  }
  @include m(size-large) {
    height: #{getCssVar('button', 'height-large')};
    @include when(icon-only) {
      width: #{getCssVar('button', 'height-large')};
    }
  }
}
