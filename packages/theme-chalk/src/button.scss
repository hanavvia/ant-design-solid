@use './common/var' as *;
@use './mixins/function' as *;
@use './mixins/config' as *;
@use './mixins/var' as *;
@use 'mixins/mixins' as *;

$button-size: small, middle, large;

@include b(button) {
  @include set-component-css-var('button', $button);
  outline: none;
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: getCssVar('button', 'font-weight');
  white-space: nowrap;
  text-align: center;
  background-image: none;
  background-color: transparent;
  border: 1px solid transparent;
  cursor: pointer;
  transition: all 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);
  user-select: none;
  touch-action: manipulation;
  color: getCssVar('button', 'color');
  font-size: getCssVar('button', 'font-size');
  padding: 4px 15px; //TODO
  border-radius: getCssVar('button', 'border-radius');
  box-shadow: 0 2px 0 rgba(0, 0, 0, 0.02); //TODO
  border-color: getCssVar('button', 'border-color');

  &:hover {
    border-color: getCssVar('button', 'primary-bg-color');
    color: getCssVar('button', 'primary-bg-color');
  }

  /* === type === */
  @include m(type-primary) {
    color: getCssVar('button', 'color-primary');
    background-color: getCssVar('button', 'primary-bg-color');
    box-shadow: 0 2px 0 rgba(5, 145, 255, 0.1);

    &:hover {
      color: getCssVar('button', 'color-primary');
      border-color: getCssVar('button', 'primary-bg-color-hover');
      background-color: getCssVar('button', 'primary-bg-color-hover');
    }
  }

  /* ===== disabled ===== */
  // TODO more disabled
  @include when-m(disabled, (type-primary, type-default, type-dashed)) {
    cursor: not-allowed;
    color: rgba(0, 0, 0, 0.25);
    background-color: rgba(0, 0, 0, 0.04);
    box-shadow: none;

    &:hover {
      border-color: getCssVar('button', 'border-color');
    }
  }

  @include m(type-dashed) {
    border-style: dashed;
  }

  @include m(type-text) {
    border: none;
    &:hover {
      background-color: getCssVar('button', 'text-bg-color-hover');
    }
  }

  @include m(type-link) {
    border: none;
    color: getCssVar('button', 'link-color');

    &:hover {
      color: getCssVar('button', 'link-color-hover');
    }
  }

  /* === icon === */
  @include when(not-icon-only) {
    @include e(icon) {
      margin-inline-end: 8px;
    }
  }
  @include e(icon) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: getCssVar('button', 'icon-size-primary');
  }

  /* === shape === */
  @include m(shape-circle) {
    padding-inline-start: 0;
    padding-inline-end: 0;
    border-radius: 50%;
  }

  @include m(shape-round) {
    padding-inline-start: 0;
    padding-inline-end: 0;
    border-radius: 50%;
  }
  @include when-m(icon-only, shape-round) {
    width: auto;
  }

  /* ===== size ===== */
  @each $size in $button-size {
    @include and-m((shape-round, size-#{$size})) {
      border-radius: getCssVar('button', 'height-#{$size}');
      padding-inline-start: getCssVar('button', 'height-#{$size}-half');
      padding-inline-end: getCssVar('button', 'height-#{$size}-half');
    }
    @include and-m((shape-circle, size-#{$size})) {
      min-width: getCssVar('button', 'height-#{$size}');
    }
    @include m(size-#{$size}) {
      height: getCssVar('button', 'height-#{$size}');
      @include when(icon-only) {
        width: getCssVar('button', 'height-#{$size}');
      }
    }
  }

  @include m(size-small) {
    font-size: getCssVar('button', 'font-size-small');
    @include e(icon) {
      font-size: getCssVar('button', 'icon-size-small');
    }
  }
}
